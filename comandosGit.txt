Comandos basico de Git: 

La estructura principal parte del comendo " git + XXX "

git init:  inicializa git en el directorio en el que se encuentra

git add: agrega los archivos para ser trakeado o monitorizados por git, se puede hacer un seguimiento a un archivo especifico mediate el comando, "git add (archivo)" o se puede agregar todos los archivos de directorio, mediante el comando "git add .".

git rm (archivo): saca el archivo del seguimiento de git, aunque sigue existiendo una copia de lo trakeado en el cached, para borrarlo del cache de git se debe usar el comando "git rm --cached (archivo)"

git status: visualiza el estado actual de git de los caambios ejecutados pero no guadados.

    -git commit -m "texto de caambios realizados": guarda los cambios en el registro de git realizados, de los archivos de texto plano dentro de la carpeta donde se uso un init, notece que el comando exige un comentario para especificar en los registros los cambio realizados. El commit solo funciona si se realiza antes un "git add".
    -git commit -am: es una integraciion de los comandos git add + git commit -m, pero solo funciona para archivos anteriormente agregados al staging con "git add".


git log: con este comando se ver el historial de todos los commit realizados, con "git log --stat" se muestra los cambios realizado en una lista, para salir de esa lista se usa la letra "Q"
    -git log --all: muestra todo los log.
    -git log --all --graph : muestra por medio de rayas las historia de las ramas.
    -git log --all --graph --decorate -- oneline: muestra de forma comprimida el historial de los log.

git show (archivo): muestra los cambios de un archivos y sus cambios.
 
git --help: ayuda de comandos de git.

git config --global user.name "" or user.email "": se usa para configurar los datos del usuario en las variable del repositorio local de git entre comilla se colocan los nombres de los datos a cambiar o el email a modificar.

git diff: se usa para comparar commit para esto se de usar el comando: git diff + commit1 + commit2.

git reset "commitX": se usa para devolver el repositorio a un estado anterior el commiX es ese estado anterior, este comando se debe complatar con (--soft: que no borra los commit antes realizados) o (--hard: que borra todo los commit hechos despue anteriormente dejando solo el commit del estado anterior a que se regreso el directorio git).

git checkout + commitX: devueleve el estado del directorio a un commit anterior, usando git checkout master se devuelve el directorio a la rama master en su estado actual. si se desean conservar los cambios de sebe usar git add y un commit para guardar los cambios y que queden en la rama master.

git rm: se usa para eliminar un archivo de git pero este se puede recuperar usando un checkout + el commitX + (nombre del archivo) donde se encuentar ese archivo. 
    - git rm --cached: Elimina los archivo del area de staging y del proximo commit pero los matiene en el disco duro.
    - git rm --force: elimina los archivo de Git y del disco, aunque existe la posibilidad de recupareacion con comandos avanzados.

git reset: es un como el git checkout pero permanente este no tiene vuelta atras asi que hay que usarlo con precaucion.
    -git reset --soft: borra todo el historial y el registro de git. se guardan los cambios que se encuentan en staging.
    -git reset --hard: hace un borrado definitivo de los commits y del area de staging.
    -git reset HEAD: saca los archivos del area de staging para que no se haga al siguiente commit.

git clone url: Se trae todo los archivos de un repositorio remoto y deja todo liisto para trabajar en el directorio local.

git push: envia todo los cambios del directorio local al remoto.

git pull: obtienes una copia actualizada de repositorio remoto es un comando mas completo que combina un git fech con un git merge.

****************************** Comando Avanzados*********************************************
 Hasta ahora hemos trabajado en la rama principal del repositorio local de Git pero podemos crear ramas alternativas para hacer modificaciones sin que estas se guarde en la rama master del proyecto, esto es util para hacer cambios mayores de una version a otra y testear posibles ramificaciones del proyecto que puede ser testeadas y solo fucionadas con la rama master una vez verificados y testeados los cambios.

git branch XXXX: crear una rama identica a la rama actual del proyecto es una bifurcacion una copia de su estado actual, este comando solo lo crea, pero para trabajar despues desde esa bifurcacion del proyecto, debemos usar "git checkout XXXX", esto nos mueve de la rama master a la birfucacion creada y es aqui, donde se empezaran a guardar los cambios hecho al repositorio en el actual estado, sin que estos se guarden en la rama principal.

git merge XXXXX : fusiona los cambios de la rama solicitada, si estamos en la rama master y hacemos un merge desde alli invocando la birfurcacion, los cambios de esta birfucacion se fucionan con la rama master. Si por el contrario estamos trabajando en la rama bifurcada y hacemos un merge de la rama master igual se fucionan, pero la rama con la bifurcacion pasa a ser la rama master.

*************************** conflictos en Git ********************************************

Los conflictos en Git ocurren cuando se fucionan una bifurcacion haciendo merge, donde se han cambiados las misma lineas de contenido en ambas ramas.

******************************************************************************************

git remote add origin + URL: este comando agrega a git un espacio en un repositorio remoto como Github.

git remote: no dice en git donde esta el origen de nuestro repositorio.
    -git remote -v muestra la dirccion url asignada al espacio remoto

git push origin master: este comando envia la rama master a el espacio remote en el caso de github se pedira un login si se usa el envio mediante htts. Si el repositorio remoto tiene archivos, se debera hacer una actualizacion en la rama master del repositorio local.Esto se podria hacer con un "git fech + un git merge" o directamente haciendo un "git pull origin master"

git pull origin master: se trae todo lo que esta en el repositorio. Probablemente salga una advertencia y eso es porque toca fusionar la historia de cambios del espacio remoto con los de la rama master local y esto se hace con  --allow-unrelated-histories.

git remote set-url origin: con este comando se cambia el repositorio remoto agregado anteriormente.

****************** Tags en git ********************
los tag es una manera simplificada de asignar nombre a los diferente commit creados por el log, estos suelen usarse para crear los nombres de la versiones.

git tag nombredeltag -m "comentario al igual que los commit" + commit.

git tag: muestra los diferebtes tag guardados.

git push origin --tags:  envia los tags al servidor remoto. 

git tag -d nombredeltag: borra el tag creado en el repositorio local pero no en el remoto.

git push origin :refs/tags/nombredetag: este comando borra el tag de github.

git show-ref --tags: muestra a que commit esta enlazado el tag.

